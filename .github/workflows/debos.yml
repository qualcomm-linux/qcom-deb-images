name: Build debos recipe

on:
  # run on pull requests to the main branch
  pull_request:
    branches: [main]
  # run on pushes to the main branch
  push:
    branches: [main]
  # run daily at 8:30am
  schedule:
    - cron: '30 8 * * *'
  # allow manual runs
  workflow_dispatch:

# only need permission to read repository; implicitely set all other
# permissions to none
permissions:
  contents: read

defaults:
  # run all commands from the debos-recipes directory
  run:
    working-directory: debos-recipes

env:
  FILESERVER_URL: https://quic-yocto-fileserver-1029608027416.us-central1.run.app

# cancel in progress builds for this workflow triggered by the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-debos:
    runs-on: [self-hosted, arm64, debbuilder]
    container:
      image: debian:trixie
      volumes:
        - /srv/gh-runners/quic-yocto/builds:/fileserver-builds
      options: --privileged
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # make sure we have latest packages first, to get latest fixes and to
      # avoid an automated update while we're building
      - name: Update OS packages
        run: |
          set -x
          apt update
          apt -y upgrade
          apt -y full-upgrade
          # debos is needed to build recipes, mtools is needed for the flash
          # recipe
          apt -y install debos mtools

      - name: Build debos recipe
        run: |
          set -x
          # start by building the root filesystem
          debos qualcomm-linux-debian-rootfs.yaml
          # debos tries KVM and UML as backends, and falls back to
          # building directly on the host, but that requires loop
          # devices; use qemu backend explicitly even if it's slower
          # qemu backend also requires to set scratchsize, otherwise the
          # whole build is done from memory and the out of memory killer
          # gets triggered
          debos -b qemu --scratchsize 4GiB -t imagetype:ufs \
              qualcomm-linux-debian-image.yaml
          debos -b qemu --scratchsize 4GiB -t imagetype:sdcard \
              qualcomm-linux-debian-image.yaml
          # build flashable files
          debos qualcomm-linux-debian-flash.yaml

      - name: Upload artifacts to fileserver
        run: |
          set -x
          # curl will be used to talk to fileserver; should be installed by
          # default
          apt -y install curl
          # github runs are only unique per repository and may also be re-run;
          # create an unique id with repository, run id, and run attempt
          id="${GITHUB_REPOSITORY}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          # create a directory for the current run
          dir="/fileserver-builds/${id}"
          mkdir -vp "${dir}"
          # copy output files
          cp -av rootfs.tar.gz "${dir}"
          cp -av dtbs.tar.gz "${dir}"
          cp -av disk-ufs.img.gz "${dir}"
          cp -av disk-sdcard.img.gz "${dir}"
          tar -cvf "${dir}"/flash.tar.gz disk-ufs.img1 disk-ufs.img2 flash_*
          # instruct fileserver to publish this directory
          url="${FILESERVER_URL}/${id}/"
          curl -X POST -H 'Accept: text/event-stream' "${url}"
      - name: Prepare LAVA test job
        run: |
          id="${GITHUB_REPOSITORY}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          url="${FILESERVER_URL}/${id}/"
          BUILD_FILE_NAME=flash.tar.gz
          BUILD_DOWNLOAD_URL="${url}${BUILD_FILE_NAME}"
          LAVA_JOB_FILE="../ci/lava/rb3gen2-vision-kit-boot.yaml"

          sed -i "s|{{BUILD_FILE_NAME}}|${BUILD_FILE_NAME}|g" ${LAVA_JOB_FILE}
          sed -i "s|{{BUILD_DOWNLOAD_URL}}|${BUILD_DOWNLOAD_URL}|g" ${LAVA_JOB_FILE}
          sed -i "s|{{GITHUB_SHA}}|${GITHUB_SHA}|g" ${LAVA_JOB_FILE}
          sed -i "s|{{GITHUB_RUN_ID}}|${GITHUB_RUN_ID}|g" ${LAVA_JOB_FILE}
          cat ${LAVA_JOB_FILE}
          echo "LAVA_JOB_FILE=${LAVA_JOB_FILE}" >> "$GITHUB_ENV"

      - name: Submit LAVA job
        timeout-minutes: 30
        uses: foundriesio/lava-action@v6
        with:
          lava_token: ${{ secrets.LAVATOKEN }}
          lava_url: 'lava.infra.foundries.io'
          job_definition: ${LAVA_JOB_FILE}
          wait_for_job: true
          fail_action_on_failure: false
          save_result_as_artifact: true
          save_job_details: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "${{ github.workspace }}/artifacts/**/*.xml"

